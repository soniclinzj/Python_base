
'''
# 2.9当列表不是首选时
            虽然列表既灵活又简单，但面对各类需求时，我们可能会有更好的选择。
            比如，要存放 1000 万个浮点数的话，数组（array）的效率要高得多，
            因为数组在背后存的并不是 float 对象，而是数字的机器翻译，也就
            是字节表述。这一点就跟 C 语言中的数组一样。再比如说，如果需要
            频繁对序列做先进先出的操作，deque（双端队列）的速度应该会更快。

            如果在你的代码里，包含操作（比如检查一个元素是否出现在一个集合中）的频率很高，用 set（集合）会更合适。
            set 专为检查元素是否存在做过优化。但是它并不是序列，因为 set 是无序的。


# 2.9.1 数组

            如果我们需要一个只包含数字的列表，那么 array.array 比 list 更高效。数组支持所有跟可变序列有关的操作，
            包括 .pop、.insert 和.extend。另外，数组还提供从文件读取和存入文件的更快的方法，如.frombytes 和 .tofile。

            创建数组需要一个类型码，这个类型码用来表示在底层的 C 语言应该存放怎样的数据类型。比如 b 类型码代表的是有符号
            的字符（signed char），因此 array('b') 创建出的数组就只能存放一个字节大小的整数，范围从 -128 到 127，这样
            在序列很大的时候，我们能节省很多空间。而且 Python 不会允许你在数组里存放除指定类型之外的数据。


                #1 引入 array 类型。
                #2 利用一个可迭代对象来建立一个双精度浮点数组（类型码是 'd'），这里我们用的可迭代对象是一个生成器表达式。
                #3 查看数组的最后一个元素。
                #4 把数组存入一个二进制文件里。
                #5 新建一个双精度浮点空数组。
                #6 把 1000 万个浮点数从二进制文件里读取出来。
                #7 查看新数组的最后一个元素。
                #8 检查两个数组的内容是不是完全一样。

'''

# 示例 2-20　一个浮点型数组的创建、存入文件和从文件读取的过程

from array import array  # 1
from random import random

floats = array('d', (random() for i in range(10**6)))  # 2
print(floats[-1])  # 3

fp = open('floats.bin', 'wb')
floats.tofile(fp)  # 4
fp.close()
floats2 = array('d')  # 5
fp = open('floats.bin', 'rb')
floats2.fromfile(fp, 10**6)  # 6
fp.close()
print(floats2[-1])  # 7

print(floats2 == floats)  # 8
